Emacs Learning:

M key: Alt
C key: Control

1. Using emacs as file manager:

M-x dired: invokes Dired, the file manager mode.
Then, C-x C-q switches to Editable Dired mode

2. Use emacs as supreme editor

(1)The most basic buffer movement commands move point (the cursor) by rows (lines) or columns (characters):
C-f	Forward one character
C-n	Next line
	
C-b	Back one character
C-p	Previous line
(arrows can use instead of these)

(2) These are more useful ones:
C-a	Beginning of line
M-f	Forward one word
M-a	Previous sentence
M-v	Previous screen
M-<	Beginning of buffer
	
C-e	End of line
M-b	Back one word
M-e	Next sentence
C-v	Next screen
M->	End of buffer

You can try these as well:
C-u 3 C-p	Back 3 lines
C-u 10 C-f	Forward 10 characters
M-1 M-0 C-f	Forward 10 characters
C-u C-n	Forward 4 lines
C-u C-u C-n	Forward 16 lines
C-u C-u C-u C-n	Forward 64 lines

M-g g	Jump to specified line

Searching for text:

C-s	Incremental search forward
C-r	Incremental search backwar
----------
Region

Mark serves another purpose: mark and point together delineate the region.

C-x h	Make region contain the entire buffer ("Select all")
M-h	Make region contain the current paragraph

Narrowing restricts the view (and editing) of a buffer to a certain region. This is handy when you're only working with a small part of a buffer (e.g. a chapter in a book). Then commands like incremental search, or beginning-of-buffer or end-of-buffer don't lead you out of the region of interest, and commands like search and replacement don't affect the entire file.

C-x n n	Narrow buffer to the current region
C-x n w	Restore ("widen") bufferd
--------
Killing ("cutting") text

As with text movement, Emacs provides commands for deleting text in various amounts.

C-k kills the portion of the current line after point (or deletes the newline following point if point is at the end of line). The prefix argument for C-k can be used to kill multiple lines:
C-k	Kill line
C-u 10 C-k	Kill 10 lines

The following commands operate on the region, and are the closest analogs to "cut" and "copy" in Emacs:
C-w	Kill region ("cut")
M-w	Save region to kill ring without deleting ("copy")

These commands are also handy:
M-d	Kill next word
M-k	Kill to end of sentence

All of the above commands kill the text being deleted, which means that Emacs removes the text and squirrels it away for later retrieval ("yanking"). Most commands which delete significant amounts of text kill it rather than simply removing it, so that you can use those commands either to "delete" text or to "cut" it for later use.
---------
Yanking ("pasting") text

After a piece of text has been killed, it goes to a place called the kill ring which is analagous to the "clipboard": you can yank an item to restore it from the kill ring with C-y. Unlike the clipboard, however, the kill ring is capable of holding many different items. If the item you want to yank is not placed when you type C-y, type M-y (repeatedly, if necessary) to cycle through previously killed items.
C-y	Yanks last killed text
M-y	Replace yanked text with previously killed text

Recall that most commands which delete a large amount of text in fact kill it (i.e. place it in the kill ring) so you can restore it later. Emacs makes it very difficult to lose a lot of text permanently: in editors with only a single clipboard, one can easily accidentally delete a large chunk of text or clobber the contents of the clipboard (by cutting two items in succession). But in Emacs, in either of those cases, the lost text can easily be retrieved from the kill ring.
---------
Undo is available via three different keys:
C-/	Undo
C-_	Undo
C-x u	Undo
---------
Incremental Search
These commands help you to issue previously issued queries:
C-s C-s	Search for most recently searched item
C-s M-p	Previous item in search history
C-s M-n	Next item in search history
C-h k C-s	Guide to more commands available in incremental search
----------
Search and replacement
M-%	Query replace

The query replace command prompts you for a search string and a replacement. Then, for each match in the buffer, you can choose whether or not to replace the search string. Here are some of the options available at each prompt:

    Type y to replace the current match.
    Type n to skip to the next match without replacing.
    Type q to exit without doing any more replacements.
    Type . to replace this match, then exit.
    Type ! to replace all remaining matches with no more questions.

See (info "(emacs)Query Replace") for more information about these (and other) options. You can also type ? anytime inside a search-and-replace operation to see a guide.
-----------
More useful features
Integration with common tools

Emacs is notable for its integration with many common tools. Not only can you invoke them from within the editor, Emacs usually helps you use their output more effectively. Here are some examples:

M-x shell

    Starts a shell in the buffer named *shell*, switching to it if it already exists. Use C-u M-x shell to use a buffer with a different name.

M-x compile

    Invokes make (with targets and options of your choice) and displays output in a new buffer. Emacs identifies error lines containing filenames and line numbers, and you can click on them to jump directly to the corresponding buffer and line.

M-x gdb

    Invokes gdb in a new buffer. You can use the gdb command line as usual in that buffer. However, Emacs lets you set breakpoints directly from your source buffers and shows execution by marking the active line in your source buffers. Emacs can also display breakpoints, the stack, and locals, simultaneously and each in their own window.

M-x grep

    Invokes grep and prints results in a new buffer. Like M-x compile, when you click on a match Emacs opens the correct file and takes you to the matching line.

M-x man

    Displays man pages.

Here are some more assorted tools:
M-x calculator	A simple calculator.
M-x calendar	A calendar.
M-x phases-of-moon	Shows upcoming quarters of the moon.
Invoking shell commands

If you need to execute a simple shell command, these commands can save you the trouble of switching to an xterm or starting a new Emacs shell buffer:

M-x shell-command or M-!

    Executes a command and displays the output in a new buffer.
M-x shell-command-on-region or M-|

    Executes a command, piping in the current region as input; displays the output in a new buffer.

For either command, a C-u prefix will insert the output in your current buffer rather than using a temporary buffer.
-------
Being unproductive with Emacs

Emacs even comes with diversions:
M-x tetris	Tetris
M-x hanoi	Towers of Hanoi game
M-x doctor	Emacs psychotherapist
-----------
Amusement

The animate package makes text dance (e.g., M-x animate-birthday-present).

M-x blackbox, M-x mpuz and M-x 5x5 are puzzles. blackbox challenges you to determine the location of objects inside a box by tomography. mpuz displays a multiplication puzzle with letters standing for digits in a code that you must guess—to guess a value, type a letter and then the digit you think it stands for. The aim of 5x5 is to fill in all the squares.

M-x bubbles is a game in which the object is to remove as many bubbles as you can in the smallest number of moves.

M-x decipher helps you to cryptanalyze a buffer which is encrypted in a simple monoalphabetic substitution cipher.

M-x dissociated-press scrambles the text in the current Emacs buffer, word by word or character by character, writing its output to a buffer named *Dissociation*. A positive argument tells it to operate character by character, and specifies the number of overlap characters. A negative argument tells it to operate word by word, and specifies the number of overlap words. Dissociated Press produces results fairly like those of a Markov chain, but is however, an independent, ignoriginal invention; it techniquitously copies several consecutive characters from the sample text between random jumps, unlike a Markov chain which would jump randomly after each word or character. Keep dissociwords out of your documentation, if you want it to be well userenced and properbose.

M-x dunnet runs an text-based adventure game.

If you want a little more personal involvement, try M-x gomoku, which plays the game Go Moku with you.

If you are a little bit bored, you can try M-x hanoi. If you are considerably bored, give it a numeric argument. If you are very, very bored, try an argument of 9. Sit back and watch.

M-x life runs Conway's “Life” cellular automaton.

M-x landmark runs a relatively non-participatory game in which a robot attempts to maneuver towards a tree at the center of the window based on unique olfactory cues from each of the four directions.

M-x morse-region converts the text in the region to Morse code; M-x unmorse-region converts it back. M-x nato-region converts the text in the region to NATO phonetic alphabet; M-x denato-region converts it back.

M-x pong, M-x snake and M-x tetris are implementations of the well-known Pong, Snake and Tetris games.

M-x solitaire plays a game of solitaire in which you jump pegs across other pegs.

The command M-x zone plays games with the display when Emacs is idle.

Finally, if you find yourself frustrated, try describing your problems to the famous psychotherapist Eliza. Just do M-x doctor. End each input by typing <RET> twice. 

---------
Multiple Window

C-x o
    Select another window (other-window). That is o, not zero. 
C-M-v
    Scroll the next window (scroll-other-window). 
M-x compare-windows
    Find next place where the text in the selected window does not match the text in the next window. 


C-x 0
    Get rid of the selected window (delete-window). That is a zero. 
C-x 1
    Get rid of all windows except the selected one (delete-other-windows). 
C-x ^
    Make selected window taller (enlarge-window). 
C-x }
    Make selected window wider (enlarge-window-horizontally). 

This is just once. So do C-u C-x }

Two-Column Editing

Two-column mode lets you conveniently edit two side-by-side columns of text. It uses two side-by-side windows, each showing its own buffer. There are three ways to enter two-column mode:

<F2> 2 or C-x 6 2
    Enter two-column mode with the current buffer on the left, and on the right, a buffer whose name is based on the current buffer's name (2C-two-columns). If the right-hand buffer doesn't already exist, it starts out empty; the current buffer's contents are not changed.

    This command is appropriate when the current buffer is empty or contains just one column and you want to add another column.
<F2> s or C-x 6 s
    Split the current buffer, which contains two-column text, into two buffers, and display them side by side (2C-split). The current buffer becomes the left-hand buffer, but the text in the right-hand column is moved into the right-hand buffer. The current column specifies the split point. Splitting starts with the current line and continues to the end of the buffer.

    This command is appropriate when you have a buffer that already contains two-column text, and you wish to separate the columns temporarily.
<F2> b buffer <RET>
C-x 6 b buffer <RET>
    Enter two-column mode using the current buffer as the left-hand buffer, and using buffer buffer as the right-hand buffer (2C-associate-buffer). 

---
Search over several files
You can try M-x rgrep.

It will ask for:

    the directory where you want to search recursively
    a file pattern for the files you want to include in the search
    the pattern you want to search

---
Replace over several files:

    M-x find-name-dired: you will be prompted for a root directory and a filename pattern.
    Press t to "toggle mark" for all files found.
    Press Q for "Query-Replace in Files...": you will be prompted for query/substitution regexps.
    Proceed as with query-replace-regexp: SPACE to replace and move to next match, n to skip a match, etc.

    GNU
    
    Assemble a list of files you want to operate on with either find-dired, find-name-dired or find-grep-dired.
    Mark all files in the resulting Dired buffer using t.
    Use Q to start a query-replace-regexp session on the marked files.
    To accept all replacements in each file, hit !. 

    C-x s ! to save all the files at once

