Add these macros;

#define _WIN32_WINNT 0x0500 //RIGHT
#include <windows.h>
------------------
void setUp(INPUT *ip)
{
    // Set up a generic keyboard event.
    ip->type = INPUT_KEYBOARD;
    ip->ki.wScan = 0; // hardware scan code for key
    ip->ki.time = 0;
    ip->ki.dwExtraInfo = 0;
}

INPUT onlyPress(int keyCode, string message="")
{
    INPUT ip;
    setUp(&ip);

    // press the key
    ip.ki.wVk = keyCode;
    ip.ki.dwFlags = 0;
    SendInput(1, &ip, sizeof(INPUT));
    Sleep(200);
    return ip;
}

bool releaseKey(INPUT *ip)
{
    ip->ki.dwFlags = KEYEVENTF_KEYUP; // KEYEVENTF_KEYUP for key release
    SendInput(1, ip, sizeof(INPUT));
    Sleep(200);
}

bool pressKey(int keyCode, string message="") // press and release
{
    INPUT ip;
    setUp(&ip);

    // press the key
    ip.ki.wVk = keyCode;
    ip.ki.dwFlags = 0;
    SendInput(1, &ip, sizeof(INPUT));

    // Release the key
    ip.ki.dwFlags = KEYEVENTF_KEYUP; // KEYEVENTF_KEYUP for key release
    SendInput(1, &ip, sizeof(INPUT));

    cout << message << endl;
    Sleep(300);

    return true;
}

bool press2Key(int keyCode1, int keyCode2, string message="")
{
    INPUT ip1;
    INPUT ip2;

    setUp(&ip1);
    setUp(&ip2);

    // press the key
    ip1.ki.wVk = keyCode1;
    ip1.ki.dwFlags = 0;
    SendInput(1, &ip1, sizeof(INPUT));

    // press the key
    ip2.ki.wVk = keyCode2;
    ip2.ki.dwFlags = 0;
    SendInput(1, &ip2, sizeof(INPUT));

    // Release the key
    ip1.ki.dwFlags = KEYEVENTF_KEYUP; // KEYEVENTF_KEYUP for key release
    SendInput(1, &ip1, sizeof(INPUT));

    // Release the key
    ip2.ki.dwFlags = KEYEVENTF_KEYUP; // KEYEVENTF_KEYUP for key release
    SendInput(1, &ip2, sizeof(INPUT));

    cout << message << endl;
    Sleep(300);

    return true;
}

bool mouseClick(bool left, bool release, string message="")
{
    INPUT ip;
    setUp(&ip);

    // press the key
    if (left)
    {
        ip.ki.wVk = VK_LBUTTON;
    } else {
        ip.ki.wVk = VK_RBUTTON;
    }
    ip.ki.dwFlags = 0;
    SendInput(1, &ip, sizeof(INPUT));

    // release
    if (release)
    {
        ip.ki.dwFlags = KEYEVENTF_KEYUP;
        return true;
    } else {
        return false;
    }
    cout << message << endl;
    Sleep(300);
}

bool mouseRelease(INPUT *ip, string message="")
{
    // null pointer, no such input
    if (!ip)
    {
        return false;
    } else {
        ip->ki.dwFlags = KEYEVENTF_KEYUP;
        return true;
    }
    cout << message << endl;
    Sleep(300);
}

// place cursor to location x, y
bool placeCursor(int x, int y)
{
    SetCursorPos(x, y);
    cout << "Cursor placed: (" << x << ", " << y << ")" << endl;
    Sleep(200);
    return 1;
}

------------------
Virtual Key codes:

<vk.h>
#define VK_0	0x30
#define VK_1	0x31
#define VK_2	0x32
#define VK_3	0x33
#define VK_4	0x34
#define VK_5	0x35
#define VK_6	0x36
#define VK_7	0x37
#define VK_8	0x38
#define VK_9	0x39
///////
#define VK_A	0x041
#define VK_B	0x042
#define VK_C	0x043
#define VK_D	0x044
#define VK_E	0x045
#define VK_F	0x046
#define VK_G	0x047
#define VK_H	0x048
#define VK_I	0x049
#define VK_J	0x04A
#define VK_K	0x04B
#define VK_L	0x04C
#define VK_M	0x04D
#define VK_N	0x04E
#define VK_O	0x04F
#define VK_P	0x050
#define VK_Q	0x051
#define VK_R    0x052
#define VK_S	0x053
#define VK_T	0x054
#define VK_U	0x055
#define VK_V	0x056
#define VK_W	0x057
#define VK_X	0x058
#define VK_Y	0x059
#define VK_Z	0x05A
////Utilities////
#define VK_LBUTTON 0x01
#define VK_RBUTTON 0x02
#define VK_BACK 0x08
#define VK_TAB 0x09
#define VK_RETURN 0x0D
#define VK_SHIFT 0x10
#define VK_CONTROL 0x11
#define VK_LMENU 0xA4 // alt
#define VK_CAPITAL 0x14
#define VK_ESCAPE 0x1B
#define VK_SPACE 0x20
#define VK_APPS 0x5D
////directions////
#define VK_LEFT 0x25
#define VK_UP 0x26
#define VK_RIGHT 0x27
#define VK_DOWN 0x28
////Function keys//
#define VK_F1 	0x70 	//F1 key
#define VK_F2 	0x71 	//F2 key
#define VK_F3 	0x72 	//F3 key
#define VK_F4 	0x73 	//F4 key
#define VK_F5 	0x74 	//F5 key
#define VK_F6 	0x75 	//F6 key
#define VK_F7 	0x76 	//F7 key
#define VK_F8 	0x77 	//F8 key
#define VK_F9 	0x78 	//F9 key
#define VK_F10 	0x79 	//F10 key
#define VK_F11 	0x7A 	//F11 key
#define VK_F12 	0x7B 	//F12 key\
