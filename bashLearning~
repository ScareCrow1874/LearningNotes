Write a bash file that can run:

put #!bin/bash at the top of the file, so that you can do ./xx.sh to run
--------------------

Linux - learning

Unix-like computer OS

Linux comes consisting of
	- The Linux kernel
	- GNU software (e.g. utilities, editor, compilers)
	- GUI
	- Software management system (rpm, deb etc.)


Multi-user system

Terminal Login: Ctrl + Alt + F1
		Ctrl + Alt + F2

Filesystem:
	- Everything is mounted under a single "root" directory -/
	- "/home" represents "My Documents" in Windows
	- "/usr" most programs are installed in;
	- "/etc" system configurartion files' dir
    Filesystem Command:
	1) pwd : where you are;
	2) cd ::
	    1> cd or cd -/ : navigate to home directory
	    2> cd target : target directory is within current directory
	    3> cd .. : go back to parent dir
	    4> cd path/to/target : target to arbitary location
	    5> cd ~username/ : go to another user's home directory
	    6> cd - : go to the previous working directory;
	3) ls : list files and directories
	4) find basedir -name '*string*' : find the file(I am not sure)
	5) locate string : search files using Linux's database
    Directory/File Manipulation:
	1) mkdir dirname : make a new directory, with name dirname;
	2) rmdir dirname : remove an empty dir;
	3) rm file : delete file;
	4) mv oldFileName newFileName : rename a file
	5) cp file1 file2 : copy file1 to file2 (Overwrite file2)
	6) rm -r oldDir : delete a directory;

Network File System (NFS):
	- Allows a computer to access files over a net work as easily 		  as if they were on its local disks;
	- File permission are determined by userID
	- Therefore user ID's must be the same on the NFS server and 		  the clients
	- Server decides which client machines are allowed to connect

Andrew File System (AFS) :
	- Distributed file system (the former two are also)
	- Advantages over NFS in security and scalability
	- Not part of standard filesystem tools in Linux, need to have
	  client software and [Kernel modules] installed;
	  [I have already installed]
	- To get access to AFS (is to access "cell"), authenticated by 		  password using >klog command
	- Access SLAC cell go to /afs/slac.stanford.edu

Cool Commands:
	Command line program to download items from the web:
	- wget:
	    1) wget URL : retrieve a single file
	    2) wget URL -O local_name : give the file a different 		       				[local name]
	    3) wget -i file : download a list of URLs from a text file 		                      containing a list of URLs
	
	Compression utility that
	> reduce file size
	> Multiple levels of compression (slower?) 
	- gzip:
	    1) gzip myplot.eps : compress file 'myplot.eps', and 		      			 produce a compressed file 					 'myplot.eps.gz'
	    2) gunzip myplot.eps.gz : uncompress the file
	    3) gzip -# myplot.eps : change level of compression (# 1-9)
	
	Archive utility that
	> allows multiple files and even large directory structures to 		  be archived into a single file   
	- tar:
	    1) tar -cf archive.tar mydir : 
		archive the 'mydir' directory and produce a file 			called 'archive.tar'
	    2) tar -zcf archive.tar.gz mydir :
		Interaction with gzip, to create compressed archives
		Sometimes compressed archives have extension .tgz
	    3) tar -tf archive.tar :
		list the contents of an archive
	    4) tar -xf archive.tar :
		extract an entire archive
	    5) tar -xf archive.tar filename :
		extract a specific file from an archive

Commands for text file:
	(Viewing files)
	- less:
	    > improved version of earlier program called 'more'
	    > allows searching
	    > Up and Down keys scroll file line by line
	    > "Ctrl + f" - forward page
	    > "Ctrl + b" - backward page
	    > Typing '/' allows you to type a searching string;
	    > Typing '?' does the same but search is backward;
	    > 'q' to quit;
	- cat:
	    > quickly viewing a short file (Cannot search)
	    > typically used to pipe the content of a file to another 		      command for processing
	- head/tail:
	    > prints the first/last n lines of files;
	      e.g. head -n 3 xxx.dat : print first 3 lines of file 					       xxx.dat
	    > For tail: more available options like:
	      e.g. tail -f -s 5 xxx.txt :
		1) -f : output append data as file grows
		2) -s S : sleep for S sec between iterations

	(Others)
	- grep:
	    > used to search and print patterns (match/not) in files
	    > can be used to filter files directly by part of file name
	      e.g. grep "e-" particles_a.dat : find all electrion 						       entries
	      e.g. grep -v "e-" particles_a.dat : find not match
	      e.g. grep e[+-] particles_a.dat : find e+ and e-
	- diff:
	    > used to compare files line by line and present any 		      difference found
	      e.g. diff -q fileA fileB : quickly check if they differ
	      e.g. diff -y --suppress-common-lines \ fileA fileB :
		   Able to see differing lines in fileA and fileB
	      e.g. diff - u fileA fileB : output a unified diff ??
	- cut:
	    > removes sections from each line of a file and output the
	      removed sections as required
	      e.g. cut -d, --delimiter=DELIM : use DELIM to separate 			   output fields;  
	      e.g. cut -f, --fields=LIST : use LIST as a comma- 		   separated list of output fields
	      e.g. cut --output-delimiter=DELIM : use DELIM to  		   separate output fields;

Chaining Commands:	
	- General:"
	    > Linux enables this chaining through I/O redirection
	    > e.g. Redirect output of a command to a file:
	      	   grep "e-" particles_a.dat > elec.dat;
	    > e.g. Finds all lines with e- and prints only their first 		           field:
	           grep "e-" particles_a.dat | cut -f 1
	- xargs:
	    > Allows you to use the output of one command as the 		      command line argument for another
	    > e.g. ls *.dat | grep particles | xargs diff -q
	- sed:
	- awk:
	    > a programming language
	    > e.g. swap order of output fields, like cut did:
	      awk '{print $2,$1}' particles_a.dat

(n) for name

TUTORIAL 1:
ls 	list files and directories
ls -a 	List All
cd + 	directory : open directory;
cd / 	go back to root;
cd - 	???
pwd 	to see what the directory you are in
mkdir (n) make directory
rmdir (n) remove directory (No ask), only works when it is empty;
rm -R (n) Remove everything in the directory, as well as the 		directory itself
nano basic text file/editor exists in each directory

Ex1
    list directories in ascending order of their size:
	du -sm * : get a list with size of each directory in a folder
	du -sm * | sort -nr : sort what's got in reverse order -r and 				      numeric -n / string -s
	du -sm * | sort -nr | head -15 return top 15 largest items
	(du stands for Disk Usage)
	OR:
	ls -s
    Other du commands:
	du -h [path] --> provide human readable format of disk usage
	ls -lSr

Chaining Commands:
	';' separate commands to execute them sequentially;
	'&' run several commands all at once (put this at the end of the command line)


--------------------
/boot: Linux kernel and boot loader files are kept; the kernel is a file called vmlinux

/etc: configuration files for the system

/bin, /usr/bin: most of the programs for the system

/sbin, /usr/sbin: contain programs for system administration

/usr: things that support user application
      /usr/src: Source code files
      /usr/share/man: The man pages

/usr/local: used for the installation of software and other files for use on the local machine; 

/var: contains files that change as the system is running, including /var/log

/lib: shared libraries
...
--------------------

IO Redirection

Standard Output
ls > file_list.txt // overwrite
ls >> file_list.txt // append

Pipes

direct the output of one command as the input of another.

ls -l | less

Why is this good? because ls -l is long. And Display it somewhere else is good

Filters:

sort: Write sorted concatenation of all FILE(s) to standard output
      -b: ignore leading blanks
      -d: consider only blanks and alphanumeric characters
      -f: ignore case -- fold lower case to upper case
      -r: reverse
      -n compare according to string numerical value
uniq: Remove duplicated lines from a sorted file
      Discard  all but one of successive identical lines from INPUT (or standard input), writing to OUTPUT (or standard output).
      -c: prefix lines by the number of occurences
      -d: only print duplicate lines
      -s: avoid comparing the first N characters
grep: Print lines matching a pattern;
      grep <what><where>
      -A NUM: print NUM lines of trailing context after matching lines
      -i: ignore case
      -m NUM: stop reading a file after NUM matching lines
      -n: Prefix each line of output with the line number
      -v: select non-matching lines
fmt: Reformat each paragraph in FILE, writing to standard output
     fmt <FILE>
     -w: maximum line width (default 75 cols)
     -u: spacing, one space between words, two after sentences.
    
------------------------------
Permissions:

To see file permissions, do ls -l

-rw-rw-r-- 1 qaz2wsx3 qaz2wsx3 2186 Oct 17 15:30 bashLearning

From this, we can know that the file 'bashLearning' is owned by user 'qaz2wsx3'
- User 'qaz2wsx3' has the right to read and write this file
- The file is owned by the group "qaz2wsx3" (the second one)
- Members of the group "qaz2wsx3" can also read and write this file
- Everybody can read this file

The full --- thing is:
-rwxrw-r--: fileType,Read/Write/Execute(owner), Read/Write/Execute(group), Read/Write/Execute(other users)

chmod: 

rwx rwx rwx = 111 111 111
rw- rw- rw- = 110 110 110
rwx --- --- = 111 000 000

and so on...

rwx = 111 in binary = 7
rw- = 110 in binary = 6
r-x = 101 in binary = 5
r-- = 100 in binary = 4

chmod u=rwx,g=rx,o=r myfile

So you can do sth like chmod 600 some_file

su
chown - change ownership
      e.g.
      $ su
      $ ...
      $ chown ownerName fileName
      $ exit
      // exit su mode
chgrp - change group ownership
----------------

find:

find where-to-look criteria what-to-do

e.g.
find / -name foo
this will search the whole system for any files named foo and display their pathnames. -name is the criteria
change / to . to search in the current directory

find . -name foo\*bar
This will search from the current directory down for foo*bar (that is, any filename that begins with foo and ends with bar)

---
copy file:

Copy single file main.c to destination directory bak:
$ cp main.c bak 

Copy 2 files main.c and def.h to destination absolute path directory /home/usr/rapid/ :
$ cp main.c def.h /home/usr/rapid/

Copy all files and directories in dev recursively to subdirectory bak:
$ cp -R dev bak

Interactive prompt before file overwrite:
$ cp -i test.c bak
cp: overwrite 'bak/test.c'? y

Update all files in current directory - copy only newer files to destination directory bak:
$ cp -u * bak

!!!Find and copy
find / -name *baa* -exec "cp {} /home/baa/"

xargs is a command on Unix and most Unix-like operating systems used to build and execute command lines from standard input. Commands like grep and awk can accept the standard input as a parameter, or argument by using a pipe. However, others like cp and echo disregard the standard input stream and rely solely on the arguments found after the command. Additionally, under the Linux kernel before version 2.6.23, arbitrarily long lists of parameters could not be passed to a command,[1] so xargs breaks the list of arguments into sublists small enough to be acceptable.


gksudo:
The main difference is as follows :

gksudo : is used to run graphical (GUI) applications as root
sudo : is used to run command line applications as root

